{"version":3,"file":"static/js/276.a4293b09.chunk.js","mappings":"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","sources":["../node_modules/@capacitor/filesystem/src/web.ts"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  CopyResult,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n  DownloadFileOptions,\n  DownloadFileResult,\n  ProgressStatus,\n} from './definitions';\nimport { Encoding } from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n\n    if (!encoding && !(data instanceof Blob)) {\n      data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n      if (!this.isBase64String(data))\n        throw Error('The supplied data is not valid base64 content.');\n    }\n\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data instanceof Blob ? data.size : data.length,\n      ctime: now,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (!encoding && !this.isBase64String(data))\n      throw Error('The supplied data is not valid base64 content.');\n\n    if (occupiedEntry !== undefined) {\n      if (occupiedEntry.content instanceof Blob) {\n        throw Error(\n          'The occupied entry contains a Blob object which cannot be appended to.',\n        );\n      }\n\n      if (occupiedEntry.content !== undefined && !encoding) {\n        data = btoa(atob(occupiedEntry.content) + atob(data));\n      } else {\n        data = occupiedEntry.content + data;\n      }\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry.name}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const files = await Promise.all(\n      entries.map(async e => {\n        let subEntry = (await this.dbRequest('get', [e])) as EntryObj;\n        if (subEntry === undefined) {\n          subEntry = (await this.dbRequest('get', [e + '/'])) as EntryObj;\n        }\n        return {\n          name: e.substring(path.length + 1),\n          type: subEntry.type,\n          size: subEntry.size,\n          ctime: subEntry.ctime,\n          mtime: subEntry.mtime,\n          uri: subEntry.path,\n        };\n      }),\n    );\n    return { files: files };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    await this._copy(options, true);\n    return;\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<CopyResult> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(\n    options: CopyOptions,\n    doRename = false,\n  ): Promise<CopyResult> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return {\n        uri: toPath,\n      };\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        let encoding;\n        if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n          encoding = Encoding.UTF8;\n        }\n\n        // Write the file to the new location\n        const writeResult = await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n          encoding: encoding,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return writeResult;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename.name}`,\n              to: `${to}/${filename.name}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n    return {\n      uri: toPath,\n    };\n  }\n\n  /**\n   * Function that performs a http request to a server and downloads the file to the specified destination\n   *\n   * @param options the options for the download operation\n   * @returns a promise that resolves with the download file result\n   */\n  public downloadFile = async (\n    options: DownloadFileOptions,\n  ): Promise<DownloadFileResult> => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const response = await fetch(options.url, requestInit);\n    let blob: Blob;\n\n    if (!options.progress) blob = await response.blob();\n    else if (!response?.body) blob = new Blob();\n    else {\n      const reader = response.body.getReader();\n\n      let bytes = 0;\n      const chunks: (Uint8Array | undefined)[] = [];\n\n      const contentType: string | null = response.headers.get('content-type');\n      const contentLength: number = parseInt(\n        response.headers.get('content-length') || '0',\n        10,\n      );\n\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) break;\n\n        chunks.push(value);\n        bytes += value?.length || 0;\n\n        const status: ProgressStatus = {\n          url: options.url,\n          bytes,\n          contentLength,\n        };\n\n        this.notifyListeners('progress', status);\n      }\n\n      const allChunks = new Uint8Array(bytes);\n      let position = 0;\n      for (const chunk of chunks) {\n        if (typeof chunk === 'undefined') continue;\n\n        allChunks.set(chunk, position);\n        position += chunk.length;\n      }\n\n      blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n    }\n\n    const result = await this.writeFile({\n      path: options.path,\n      directory: options.directory ?? undefined,\n      recursive: options.recursive ?? false,\n      data: blob,\n    });\n\n    return { path: result.uri, blob };\n  };\n\n  private isBase64String(str: string): boolean {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: 'directory' | 'file';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string | Blob;\n}\n"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","FilesystemWeb","WebPlugin","constructor","DB_VERSION","DB_NAME","_writeCmds","downloadFile","async","requestInit","buildRequestInit","options","webFetchExtra","response","fetch","url","blob","progress","body","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","value","read","status","this","notifyListeners","allChunks","Uint8Array","position","chunk","set","Blob","buffer","type","undefined","writeFile","directory","_a","recursive","_b","data","uri","initDb","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","indexOf","then","conn","req","transaction","objectStore","dbIndexRequest","indexName","index","getPath","uriPath","cleanedUriPath","replace","fsPath","clear","readFile","entry","Error","content","encoding","doRecursive","occupiedEntry","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","appendFile","btoa","atob","deleteFile","IDBKeyRange","only","depth","match","parentEntry","rmdir","fullPath","readDirResult","readdir","files","entryPath","concat","name","stat","entries","all","map","subEntry","e","substring","getUri","rename","_copy","copy","requestPermissions","publicStorage","checkPermissions","doRename","arguments","toDirectory","to","from","fromDirectory","fromPath","toPath","parent","children","pathsA","pathsB","every","isPathParent","toObj","toPathComponents","fromObj","updateTime","file","Encoding","UTF8","writeResult","contents","filename","str","err","_debug"],"sourceRoot":""}